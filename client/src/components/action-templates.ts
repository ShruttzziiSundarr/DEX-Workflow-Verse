// Action templates with parameter schemas
export const ACTION_TEMPLATES = [
  {
    id: "httpRequest",
    name: "HTTP Request",
    description: "Make an API call to an external service",
    defaultConfig: {
      url: "",
      method: "GET",
      headers: "{}",
      body: "",
    },
    parameterSchema: {
      url: {
        type: "text",
        label: "URL",
        description: "The endpoint URL to call",
        placeholder: "https://api.example.com/data",
        required: true,
      },
      method: {
        type: "select",
        label: "Method",
        description: "HTTP method to use",
        options: ["GET", "POST", "PUT", "DELETE", "PATCH"],
        defaultValue: "GET",
        required: true,
      },
      headers: {
        type: "json",
        label: "Headers",
        description: "HTTP headers as JSON object",
        placeholder: '{ "Content-Type": "application/json" }',
        required: false,
      },
      body: {
        type: "textarea",
        label: "Request Body",
        description: "JSON body to send with POST/PUT requests",
        placeholder: '{ "key": "value" }',
        required: false,
      },
    },
  },
  {
    id: "smartContractCall",
    name: "Smart Contract Call",
    description: "Execute a function on a blockchain smart contract",
    defaultConfig: {
      contractAddress: "",
      functionName: "",
      abi: "",
      parameters: "[]",
      value: "0",
    },
    parameterSchema: {
      contractAddress: {
        type: "text",
        label: "Contract Address",
        description: "The address of the smart contract",
        placeholder: "0x...",
        required: true,
      },
      functionName: {
        type: "text",
        label: "Function Name",
        description: "The name of the function to call",
        placeholder: "transfer",
        required: true,
      },
      abi: {
        type: "textarea",
        label: "Contract ABI",
        description: "JSON ABI for the function or entire contract",
        placeholder: "[{\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
        required: true,
      },
      parameters: {
        type: "json",
        label: "Function Parameters",
        description: "Parameters to pass to the contract function (as JSON array)",
        placeholder: "[\"0x123...\", \"1000000000\"]",
        required: false,
      },
      value: {
        type: "text",
        label: "ETH Value",
        description: "Amount of ETH to send with the transaction (in wei)",
        placeholder: "0",
        required: false,
      },
    },
  },
  {
    id: "defiSwap",
    name: "DeFi Token Swap",
    description: "Swap one token for another on a decentralized exchange",
    defaultConfig: {
      sourceToken: "",
      targetToken: "",
      amount: "",
      slippage: "0.5",
      useBestRoute: true,
      dex: "uniswap",
    },
    parameterSchema: {
      sourceToken: {
        type: "text",
        label: "Source Token",
        description: "Token symbol or address to swap from",
        placeholder: "ETH",
        required: true,
      },
      targetToken: {
        type: "text",
        label: "Target Token",
        description: "Token symbol or address to swap to",
        placeholder: "USDC",
        required: true,
      },
      amount: {
        type: "text",
        label: "Amount",
        description: "Amount of source token to swap",
        placeholder: "0.1",
        required: true,
      },
      slippage: {
        type: "text",
        label: "Slippage Tolerance (%)",
        description: "Maximum price slippage you're willing to accept",
        placeholder: "0.5",
        required: false,
      },
      useBestRoute: {
        type: "switch",
        label: "Use Best Route",
        description: "Automatically find the best swap route",
        required: false,
      },
      dex: {
        type: "select",
        label: "DEX",
        description: "Decentralized exchange to use",
        options: ["uniswap", "sushiswap", "curve", "balancer"],
        defaultValue: "uniswap",
        required: false,
      },
    },
  },
  {
    id: "tokenTransfer",
    name: "Token Transfer",
    description: "Transfer tokens to a wallet address",
    defaultConfig: {
      token: "",
      recipient: "",
      amount: "",
      memo: "",
    },
    parameterSchema: {
      token: {
        type: "text",
        label: "Token",
        description: "Token symbol or contract address",
        placeholder: "ETH",
        required: true,
      },
      recipient: {
        type: "text",
        label: "Recipient Address",
        description: "Wallet address to send tokens to",
        placeholder: "0x...",
        required: true,
      },
      amount: {
        type: "text",
        label: "Amount",
        description: "Amount of tokens to transfer",
        placeholder: "0.1",
        required: true,
      },
      memo: {
        type: "text",
        label: "Memo (Optional)",
        description: "Add a note to this transfer",
        placeholder: "Payment for services",
        required: false,
      },
    },
  },
  {
    id: "emailSend",
    name: "Send Email",
    description: "Send an email notification",
    defaultConfig: {
      recipient: "",
      subject: "",
      body: "",
    },
    parameterSchema: {
      recipient: {
        type: "text",
        label: "Recipient",
        description: "Email address of the recipient",
        placeholder: "user@example.com",
        required: true,
      },
      subject: {
        type: "text",
        label: "Subject",
        description: "Subject line of the email",
        placeholder: "Transaction Completed",
        required: true,
      },
      body: {
        type: "textarea",
        label: "Body",
        description: "Email content (supports template variables like {{amount}})",
        placeholder: "Your transaction of {{amount}} {{token}} has been completed.",
        required: true,
      },
    },
  },
  {
    id: "waitForCondition",
    name: "Wait For Condition",
    description: "Wait until a specific condition is met before continuing",
    defaultConfig: {
      type: "time",
      timeDelay: "60",
      blockConfirmations: "1",
      priceTarget: "",
      priceComparison: "above",
      asset: "",
    },
    parameterSchema: {
      type: {
        type: "select",
        label: "Condition Type",
        description: "Type of condition to wait for",
        options: ["time", "blockConfirmations", "price"],
        defaultValue: "time",
        required: true,
      },
      timeDelay: {
        type: "text",
        label: "Time Delay (seconds)",
        description: "Number of seconds to wait",
        placeholder: "60",
        required: false,
      },
      blockConfirmations: {
        type: "text",
        label: "Block Confirmations",
        description: "Number of block confirmations to wait for",
        placeholder: "1",
        required: false,
      },
      priceTarget: {
        type: "text",
        label: "Price Target",
        description: "Target price to wait for",
        placeholder: "1800",
        required: false,
      },
      priceComparison: {
        type: "select",
        label: "Price Comparison",
        description: "Comparison operator for price",
        options: ["above", "below", "equal"],
        defaultValue: "above",
        required: false,
      },
      asset: {
        type: "text",
        label: "Asset",
        description: "Asset to monitor (for price conditions)",
        placeholder: "ETH",
        required: false,
      },
    },
  },
];